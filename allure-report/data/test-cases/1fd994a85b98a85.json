{"uid":"1fd994a85b98a85","name":"test_successful_register","fullName":"tests.test_register#test_successful_register","historyId":"691f65ce6b1c51b313f6cea2b19e6ea1","time":{"start":1701684886699,"stop":1701684907338,"duration":20639},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=118.0.5993.117)\nStacktrace:\n#0 0x55c655b9afb3 <unknown>\n#1 0x55c65586e4a7 <unknown>\n#2 0x55c655847204 <unknown>\n#3 0x55c6558dccaf <unknown>\n#4 0x55c6558f0756 <unknown>\n#5 0x55c6558d7713 <unknown>\n#6 0x55c6558aa18b <unknown>\n#7 0x55c6558aaf7e <unknown>\n#8 0x55c655b608d8 <unknown>\n#9 0x55c655b64800 <unknown>\n#10 0x55c655b6ecfc <unknown>\n#11 0x55c655b65418 <unknown>\n#12 0x55c655b3242f <unknown>\n#13 0x55c655b894e8 <unknown>\n#14 0x55c655b896b4 <unknown>\n#15 0x55c655b9a143 <unknown>\n#16 0x7fb131e94ac3 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04b16ef7e913635eeaaab630575f3ee3\")>\n\n    @pytest.mark.register\n    def test_successful_register(driver):\n        register_page = RegisterPage(driver)\n        register_page.open()\n        register_page.register(VALID_USERNAME, VALID_EMAIL, VALID_PASSWORD)\n>       register_page.wait_for_element_to_be_visible(register_page.locators.WELCOME_MESSAGE, 20)\n\ntests/test_register.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:15: in wait_for_element_to_be_visible\n    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n../../../anaconda3/envs/automated-testing-framework/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\n../../../anaconda3/envs/automated-testing-framework/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:151: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n../../../anaconda3/envs/automated-testing-framework/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../anaconda3/envs/automated-testing-framework/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb01f08f1d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x55c655b896b4 \\\\u003Cunknown>\\\\n#15 0x55c655b9a143 \\\\u003Cunknown>\\\\n#16 0x7fb131e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=118.0.5993.117)\nE       Stacktrace:\nE       #0 0x55c655b9afb3 <unknown>\nE       #1 0x55c65586e4a7 <unknown>\nE       #2 0x55c655847204 <unknown>\nE       #3 0x55c6558dccaf <unknown>\nE       #4 0x55c6558f0756 <unknown>\nE       #5 0x55c6558d7713 <unknown>\nE       #6 0x55c6558aa18b <unknown>\nE       #7 0x55c6558aaf7e <unknown>\nE       #8 0x55c655b608d8 <unknown>\nE       #9 0x55c655b64800 <unknown>\nE       #10 0x55c655b6ecfc <unknown>\nE       #11 0x55c655b65418 <unknown>\nE       #12 0x55c655b3242f <unknown>\nE       #13 0x55c655b894e8 <unknown>\nE       #14 0x55c655b896b4 <unknown>\nE       #15 0x55c655b9a143 <unknown>\nE       #16 0x7fb131e94ac3 <unknown>\n\n../../../anaconda3/envs/automated-testing-framework/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1701684877015,"stop":1701684886680,"duration":9665},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"driver::0","time":{"start":1701684908100,"stop":1701684908187,"duration":87},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"register"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_register"},{"name":"host","value":"hilsCYBER"},{"name":"thread","value":"74784-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_register"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["register"]},"source":"1fd994a85b98a85.json","parameterValues":[]}